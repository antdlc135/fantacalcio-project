#--kind python:default

import psycopg
import sys
sys.path.insert(0, '../..')
import os

syspath = sys.path
# curpath = os.path.dirname(os.path.abspath(__file__))
# os.chdir("..")
# os.chdir("..")
# sys.path.insert(0, os.getcwd())

from ..repository.postgres import main as dbClient
from ..repository.postgres.models.Player import getModel

# test methods
def createTableTest(self, args):

   with psycopg.connect(args.get("POSTGRES_URL")) as conn:
      with conn.cursor() as cur:
         # jsonSerializedObjString = args.get("playersToInsert")
          jsonSerializedObjString = "[{\"firstName\": \"test_firstName\", \"lastName\": \"test_lastName\", \"serieaPlayer\": \"true\", \"position\": \"test_position\", \"roleId\": 1, \"teamId\": 2}]"

          playersToInsert = getModel({"model": "Player", "payload": jsonSerializedObjString, "toInsert": True})
          print("getModel Player to Insert Model: " + str(playersToInsert))

          self.cur.execute("""
            CREATE EXTENSION IF NOT EXISTS "pgcrypto";
            CREATE TABLE IF NOT EXISTS Players (
              id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
              uid UUID DEFAULT gen_random_uuid(),
              firstName VARCHAR,
              lastName VARCHAR,
              position VARCHAR,
              roleId INT,
              teamId INT,
              serieaPlayer BOOLEAN NOT NULL DEFAULT TRUE
            );
            """
          )

          columns = str(tuple([column for column in playersToInsert[0].keys()])).replace("'","")

          insert = f"INSERT INTO Players{columns} VALUES "

          for recordValues in playersToInsert:
            values =  recordValues.values()
            valueList = tuple([value if value != None else "" for value in values])

          pgCmd = insert + str(valueList)
          print("pg insert cmd: " + pgCmd)

          self.cur.execute(pgCmd)


          conn.commit()
          conn.close()


          response = dbClient({"module": "Player", "action": "getAll"})
          # response = dbClient({"module": "Player", "action": "inserPlayers", "payload": playersToInsert})
          return response

def deletePlayersTableTest(self,args):
  self.cur.execute("DROP TABLE Players")
  self.conn.commit()
  self.response["body"] = "Players Table Deleted."
  return self.response